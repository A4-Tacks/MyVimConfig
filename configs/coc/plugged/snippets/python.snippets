# python snippets
snippet fn "define function" b
def $1($2)${3: -> ${4:None}}:
	${0:pass}
endsnippet
snippet fm "define method" b
def $1(self, $2)${3: -> ${4:None}}:
	${0:pass}
endsnippet
snippet __main "main block" b
if __name__ == '__main__':
	${0:pass}
endsnippet
snippet try "try...except" b
try:
	$1
except ${2:Exception}${3: as ${4:e}}:
	${0:raise $4}
endsnippet
snippet tryfy "try...finally" b
try:
	${1:pass}
finally:
	${0:pass}
endsnippet
snippet with "with...as..." b
with ${1:open(${2:path})} as ${3:file}:
	${0:pass}
endsnippet
snippet if "if" b
if $1:
	${0:pass}
endsnippet
snippet elif "elif" b
elif $1:
	${0:pass}
endsnippet
snippet else "else" b
else:
	$0
endsnippet
snippet while "while" b
while $1:
	${0:pass}
endsnippet
snippet until "until" b
while not $1:
	${0:pass}
endsnippet
snippet for "for in" b
for ${1:i} in ${2:range($3)}:
	${0:pass}
endsnippet
snippet match "match" b
match $1:
	${0:pass}
endsnippet
snippet case "case" b
case ${1:_}:
	${0:pass}
endsnippet
snippet class "new class" b
class $1:
	${0:pass}
endsnippet
snippet from "from ... import ..." b
from $1 import $0
endsnippet
snippet dbg "print(f'{var=}')" b
print(f"\{$1=\}")$0
endsnippet
snippet comprehensions "comprehensions" i
$0 for $1 in ${2:range($3)}
endsnippet
snippet fdecorf "func decor func" b
def $1(target):
	def ${2:inner}(*args, **kwargs):
		result = target(*args, **kwargs)$0
		return result
	return $2
endsnippet
snippet fdecors "func decor self" b
def $1(self: object):
	return self
endsnippet
