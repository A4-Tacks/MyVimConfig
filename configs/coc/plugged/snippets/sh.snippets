snippet func "function func {}" b
function ${1:name} {
	$0
}
endsnippet
snippet funcl "func() {}" b
${1:name}() {
	$0
}
endsnippet
snippet local "local var" b
local $0
endsnippet
snippet declare "declare" b
declare $0
endsnippet
snippet declmap "declare string map" b
declare -A $1=($0)
endsnippet
snippet trap "trap" b
trap '$1' ${2:exit}
endsnippet
snippet hash "hash" b
hash $0
endsnippet
snippet readonly "readonly" b
readonly $0
endsnippet
snippet read "read" i
read -r
endsnippet
snippet readz "read string to null" i
read -rd '' $0
endsnippet
snippet mapfile "mapfile" b
mapfile -t $0
endsnippet
snippet mapfilez "mapfile string to null" b
mapfile -td '' $0
endsnippet
snippet findz "find -print0" b
find $1 -print0
endsnippet
snippet or "||" i
|| $0
endsnippet
snippet orexit "|| exit" i
|| exit
endsnippet
snippet orret "|| return" i
|| return
endsnippet
snippet and "&&" i
&& $0
endsnippet
snippet test "test" i
[ "\$$1" ${2:=} ${3:1} ]
endsnippet
snippet regex "builtin regex match" i
[[ \$$1 =~ $2 ]]
endsnippet
snippet coproc "new coproc" b
coproc ${1:name} {
	$0
}
endsnippet
snippet inproc "redirect stdin from proc" i
< <($0)
endsnippet
snippet toproc "redirect stdout from proc" i
> >($0)
endsnippet
snippet for "for i in ..." b
for ${1:i} in ${2:"\$\{${3:list}[@]\}"}; do
	$0
done
endsnippet
snippet fori "for ((i=0; i<...; ++i))" b
for ((${1:i} = ${2:0}; $1 < ${3:n}; ++$1)); do
	$0
done
endsnippet
snippet if "if" b
if $1; then
	$0
fi
endsnippet
snippet ifx "if (())" b
if ((${1:n == 1})); then
	$0
fi
endsnippet
snippet ifs "if [[]]" b
if [[ ${1:"\$x" = yes} ]]; then
	$0
fi
endsnippet
snippet elif "elif" b
elif $1; then
	$0
endsnippet
snippet elifx "elif (())" b
elif ((${1:n == 1})); then
	$0
endsnippet
snippet elifs "elif [[]]" b
elif [[ ${1:"\$x" = yes} ]]; then
	$0
endsnippet
snippet else "else" b
else
	$0
endsnippet
snippet while "while" i
while $1; do
	$0
done
endsnippet
snippet whilex "while (())" b
while ((${1:n == 1})); do
	$0
done
endsnippet
snippet whiles "while [[]]" b
while [[ ${1:"\$x" = yes} ]]; do
	$0
done
endsnippet
snippet until "until" i
until $1; do
	$0
done
endsnippet
snippet untilx "until (())" b
until ((${1:n == 1})); do
	$0
done
endsnippet
snippet untils "until [[]]" b
until [[ ${1:"\$x" = yes} ]]; do
	$0
done
endsnippet
snippet break "break" i
break
endsnippet
snippet continue "continue" i
continue
endsnippet
snippet return "return" i
return
endsnippet
snippet exit "exit" i
exit
endsnippet
snippet true "true" i
true
endsnippet
snippet false "false" i
false
endsnippet
snippet command "command" i
command $0
endsnippet
snippet builtin "builtin" i
builtin $0
endsnippet
snippet wait "wait" i
wait
endsnippet
snippet echo "echo" i
echo $0
endsnippet
snippet printf "printf" i
printf '$1' $0
endsnippet
snippet eval "eval" b
eval $0
endsnippet
snippet exec "exec" b
exec $0
endsnippet
snippet execfd "exec this shell" b
exec $1<>$0
endsnippet
snippet mktemp "mktemp to variable" b
${1:tmp}=$(mktemp${2: -d} ${3:tmp}.XXXXXXXXXX)
endsnippet
snippet cd "chdir" i
cd -- $0
endsnippet
snippet scriptdir "script directory" i
"\$(command dirname -- "\$0")"
endsnippet
snippet v "use var" i
"\$\{$1\}"$0
endsnippet
snippet vi "in string var" i
\$\{$1\}$0
endsnippet
snippet vl "list var" i
"\$\{$1[${2:@}]\}"$0
endsnippet
snippet vli "list var in string" i
\$\{$1[${2:@}]\}$0
endsnippet
snippet expr "((expr))" i
((${1:n = 0}))$0
endsnippet
snippet case "case...esac" i
case "\$\{$1\}" in
	$2) $0;;
esac
endsnippet
snippet select "select x in ..." i
PS3="${1:#?> }"; select ${2:item} in ${3:"\$\{${4}[@]\}"}; do
	$0
done
endsnippet
snippet dbg "debug variable" b
echo "\$\{$1@A\}" >&2
endsnippet
snippet err ">&2" i
>&2$0
endsnippet
snippet heredoc "heredoc" i
<<- ${1:EOF}
$0
$1
endsnippet
snippet range "const range: {start..stop..step}" i
\{${1:0}..${2:n}${3:..${4:step}}\}$0
endsnippet
snippet REPLY "default read variable" i
REPLY
endsnippet
snippet getopts "quick using getopts" i
OPTIND=1
while getopts h$1 opt; do case "$opt" in
	h)
		printf 'Usage: %q [Options]\n\n' "${0##*/}"
		printf '%s\n' \
			'Options:' \
			'    -h                 show help' \
			&& exit
		;;$2
	*)
		((--OPTIND <= 0)) && OPTIND=1
		printf '%q: parse args failed, near by %q\n' "\$0" "${!OPTIND}" >&2
		exit 2
esac done
if [ "$OPTIND" -le $# ]; then
	printf '%q: unexpected arg %q\n' "\$0" "${!OPTIND}" >&2
	exit 2
fi

endsnippet
snippet OPTARG "getopts argument" i
OPTARG
endsnippet
snippet OPTIND "getopts next parse index" i
OPTIND
endsnippet
